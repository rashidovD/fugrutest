[{"C:\\Users\\strat\\OneDrive\\Рабочий стол\\fugrtest\\fugr\\src\\index.js":"1","C:\\Users\\strat\\OneDrive\\Рабочий стол\\fugrtest\\fugr\\src\\reportWebVitals.js":"2","C:\\Users\\strat\\OneDrive\\Рабочий стол\\fugrtest\\fugr\\src\\components\\Loader\\Loader.jsx":"3","C:\\Users\\strat\\OneDrive\\Рабочий стол\\fugrtest\\fugr\\src\\components\\Table\\Table.jsx":"4","C:\\Users\\strat\\OneDrive\\Рабочий стол\\fugrtest\\fugr\\src\\components\\App\\App.js":"5","C:\\Users\\strat\\OneDrive\\Рабочий стол\\fugrtest\\fugr\\src\\components\\ViewHumanData\\ViewHumanData.jsx":"6","C:\\Users\\strat\\OneDrive\\Рабочий стол\\fugrtest\\fugr\\src\\components\\ModeSelector\\ModeSelector.jsx":"7","C:\\Users\\strat\\OneDrive\\Рабочий стол\\fugrtest\\fugr\\src\\components\\SearchPerson\\SearchPerson.jsx":"8"},{"size":540,"mtime":1606917923969,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1606496617229,"results":"11","hashOfConfig":"10"},{"size":284,"mtime":1606917116317,"results":"12","hashOfConfig":"10"},{"size":1944,"mtime":1606987898875,"results":"13","hashOfConfig":"10"},{"size":5384,"mtime":1606987051713,"results":"14","hashOfConfig":"10"},{"size":784,"mtime":1606976142082,"results":"15","hashOfConfig":"10"},{"size":878,"mtime":1606976337049,"results":"16","hashOfConfig":"10"},{"size":640,"mtime":1606982614761,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"5wx0dz",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\strat\\OneDrive\\Рабочий стол\\fugrtest\\fugr\\src\\index.js",[],["36","37"],"C:\\Users\\strat\\OneDrive\\Рабочий стол\\fugrtest\\fugr\\src\\reportWebVitals.js",[],"C:\\Users\\strat\\OneDrive\\Рабочий стол\\fugrtest\\fugr\\src\\components\\Loader\\Loader.jsx",[],"C:\\Users\\strat\\OneDrive\\Рабочий стол\\fugrtest\\fugr\\src\\components\\Table\\Table.jsx",[],"C:\\Users\\strat\\OneDrive\\Рабочий стол\\fugrtest\\fugr\\src\\components\\App\\App.js",["38"],"import React from 'react';\nimport ReactPaginate from 'react-paginate';\nimport Table from '../Table/Table';\nimport Loader from '../Loader/Loader';\nimport ViewHumanData from '../ViewHumanData/ViewHumanData';\nimport ModeSelector from '../ModeSelector/ModeSelector';\nimport SearchPerson from '../SearchPerson/SearchPerson';\n// для сортировки используется библиотека lodash\nimport _ from 'lodash';\n\nfunction App() {\n  const [isModeSelected, setIsModeSelected] = React.useState(false);\n  const [isLoading, setIslodaing] = React.useState(false);\n  const [data, setData] = React.useState([]);\n  const [search, setSearch] = React.useState('');\n  const [sort, setSort] = React.useState('asc');\n  const [sortField, setSortField] = React.useState('id');\n  const [currentPage, setCurrentPage] = React.useState(0);\n  const [row, setRow] = React.useState(null);\n\n  async function getFetchData(url) {\n      // получаем данные с помощью fetch запроса\n      const res = await fetch(url)\n      // преобразовываем в json формат\n      const data = await res.json()\n      // убираем Loader после загрузки данных\n      setIslodaing(false)\n      // показываем пользователю уже отсортированные данные\n      setData(_.orderBy(data, sortField, sort))\n    }\n\n  const handleClickSort = (sortField) => {\n    const clonedData = data.concat();\n    const sortType = sort === 'asc' ? 'desc' : 'asc'\n    const orderData = _.orderBy(clonedData, sortField, sortType)\n\n    setData(orderData);\n    setSort(sortType);\n    setSortField(sortField);\n  }\n\n  const onRowSelect = (row) => {\n    setRow(row)\n  }\n\n  // функция заглушка для обновления текста в textarea\n  const handleChange = (event) => {\n    console.log(event);\n  }\n\n  // функция поиска отдельного человека\n  const onSearch = (search) => {\n    setSearch(search)\n    setCurrentPage(0)\n  }\n\n  const modeSelectHandler = (url) => {\n    setIsModeSelected(true)\n    setIslodaing(true)\n    // сбросил data чтобы при отправке запроса пагинацию не было видно\n    setData([])\n    setRow(null)\n    getFetchData(url)\n    // сброс начальной страницы при поиске на 0, иначе переключение режимов\n    // работает не корректно\n    setCurrentPage(0)\n    // сброс данных чтобы при нажатии кнопки поиска выдача была полная\n    // а не по залипшей строке search\n    setSearch('')\n  }\n\n  // выбираем режим получения данных (32/1000)\n  const pageChangeHandler = ({selected}) => {\n    setCurrentPage(selected)\n  }\n\n  // // Фильтрация данных\n  const getFilteredData = () => {\n    if (!search) {\n      return data\n    }\n    return data.filter(item => {\n      return item['firstName']\n        .toLowerCase()\n        .includes(search.toLowerCase())\n        ||\n        item['lastName']\n        .toLowerCase()\n        .includes(search.toLowerCase())\n    })\n  }\n\n// Фильтрация данных\n  const filteredData = getFilteredData()\n// указываем что из массива data показываем только 50 результатов на странице\n// и отфильтрованные по строке search\n  const displayData = _.chunk(filteredData, 50)[currentPage]\n\n  // считаем сколько данных в выдаче и в зависимости от этого выводим длину пагинации\n  const pageCount = Math.ceil(filteredData.length / 50)\n\n  return (\n    <div className=\"container\">\n      {\n        isLoading\n        ? null\n        : <ModeSelector  onSelect={modeSelectHandler}/>\n      }\n\n      {\n        isLoading\n          ? <Loader />\n          : data.length > 0\n          ? <>\n              <SearchPerson onSearch={onSearch} />\n              <Table\n                data={displayData}\n                handleClickSort={handleClickSort}\n                sort={sort}\n                sortField={sortField}\n                onRowSelect={onRowSelect}\n              />\n            </>\n          :\n            null\n        }\n\n        {\n          data.length > 50\n            ? <ReactPaginate\n                previousLabel={'<'}\n                nextLabel={'>'}\n                breakLabel={'...'}\n                breakClassName={'break-me'}\n                pageCount={pageCount}\n                marginPagesDisplayed={2}\n                pageRangeDisplayed={5}\n                onPageChange={pageChangeHandler}\n                containerClassName={'pagination'}\n                activeClassName={'active'}\n                pageClassName={'page-item'}\n                pageLinkClassName={'page-link'}\n                previousClassName={'page-item'}\n                nextClassName={'page-item'}\n                previousLinkClassName={'page-link'}\n                nextLinkClassName={'page-link'}\n                forcePage={currentPage}\n              />\n            :\n              null\n        }\n\n        {\n          row && <ViewHumanData\n            detailsPersonData={row}\n            handleChange={handleChange}\n          />\n        }\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\strat\\OneDrive\\Рабочий стол\\fugrtest\\fugr\\src\\components\\ViewHumanData\\ViewHumanData.jsx",[],"C:\\Users\\strat\\OneDrive\\Рабочий стол\\fugrtest\\fugr\\src\\components\\ModeSelector\\ModeSelector.jsx",[],"C:\\Users\\strat\\OneDrive\\Рабочий стол\\fugrtest\\fugr\\src\\components\\SearchPerson\\SearchPerson.jsx",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":12,"column":10,"nodeType":"45","messageId":"46","endLine":12,"endColumn":24},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'isModeSelected' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]