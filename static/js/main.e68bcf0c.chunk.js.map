{"version":3,"sources":["components/Table/Table.jsx","components/Loader/Loader.jsx","components/ViewHumanData/ViewHumanData.jsx","components/ModeSelector/ModeSelector.jsx","components/SearchPerson/SearchPerson.jsx","components/App/App.js","reportWebVitals.js","index.js"],"names":["Table","data","handleClickSort","sort","sortField","onRowSelect","className","onClick","bind","map","unit","id","firstName","lastName","email","phone","Loader","ViewHumanData","detailsPersonData","handleChange","value","description","onChange","address","streetAddress","city","state","zip","ModeSelector","props","onSelect","SearchPerson","React","useState","setValue","onSearch","type","event","target","App","setIsModeSelected","isLoading","setIslodaing","setData","search","setSearch","setSort","setSortField","currentPage","setCurrentPage","row","setRow","url","a","fetch","res","json","_","orderBy","filteredData","filter","item","toLowerCase","includes","displayData","chunk","pageCount","Math","ceil","length","getFetchData","clonedData","concat","sortType","orderData","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","selected","containerClassName","activeClassName","pageClassName","pageLinkClassName","previousClassName","nextClassName","previousLinkClassName","nextLinkClassName","forcePage","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e68bcf0c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Table = ({data, handleClickSort, sort, sortField, onRowSelect}) => {\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th onClick={handleClickSort.bind(null, 'id')}>\n            id {sortField === 'id' ? <small>{sort}</small> : null}\n          </th>\n          <th onClick={handleClickSort.bind(null, 'firstName')}>\n            firstName {sortField === 'firstName' ? <small>{sort}</small> : null}\n          </th>\n          <th onClick={handleClickSort.bind(null, 'lastName')}>\n            lastName {sortField === 'lastName' ? <small>{sort}</small> : null}\n          </th>\n          <th onClick={handleClickSort.bind(null, 'email')}>\n            email {sortField === 'email' ? <small>{sort}</small> : null}\n          </th>\n          <th onClick={handleClickSort.bind(null, 'phone')}>\n            phone {sortField === 'phone' ? <small>{sort}</small> : null}\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {data && data.map((unit) => (\n          <tr key={unit.id + unit.phone} onClick={onRowSelect.bind(null, unit)}>\n            <td>{unit.id}</td>\n            <td>{unit.firstName}</td>\n            <td>{unit.lastName}</td>\n            <td>{unit.email}</td>\n            <td>{unit.phone}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Table;\n","import React from 'react'\nimport './Loader.css'\n\nfunction Loader() {\n  return (\n    <section className=\"preloader\">\n      <i className=\"preloader__rotary\" />\n      <p className=\"preloader__text\">Идет загрузка данных...</p>\n    </section>\n  )\n}\n\nexport default Loader","import React from 'react';\n\nconst ViewHumanData = ({ detailsPersonData, handleChange }) => {\n  return (\n    <div>\n      <p>\n        Выбран пользователь:\n        <b>{`${detailsPersonData.firstName} ${detailsPersonData.lastName}`}</b>\n      </p>\n      <p>\n        Описание:<br />\n        <textarea\n          value={detailsPersonData.description}\n          onChange={handleChange}\n        />\n      </p>\n      <p>Адрес проживания: <b>{detailsPersonData.address.streetAddress}</b></p>\n      <p>Город: <b>{detailsPersonData.address.city}</b></p>\n      <p>Провинция/штат: <b>{detailsPersonData.address.state}</b></p>\n      <p>Индекс: <b>{detailsPersonData.address.zip}</b></p>\n    </div>\n  );\n};\n\nexport default ViewHumanData;","import React from 'react';\nimport './ModeSelector.css';\n\nconst ModeSelector = (props) => {\n\n  const smallUrl = `http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}`;\n\n  const bigUrl = `http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}`;\n\n  return (\n    <div className=\"button__container\">\n      <button\n        className=\"btn btn-success\"\n        onClick={() => props.onSelect(smallUrl)}\n      >32 элемента</button>\n      <button\n        className=\"btn btn-danger\"\n        onClick={() => props.onSelect(bigUrl)}\n      >1000 элементов</button>\n    </div>\n  )\n}\n\nexport default ModeSelector;","import React from 'react';\n\nconst SearchPerson = (props) => {\n\n  const [value, setValue] = React.useState('');\n\n  const changeInputValue = (event) => {\n    setValue(event.target.value)\n  }\n\n  return (\n    <div className=\"input-group mb-3\">\n      <div className=\"input-group-prepend\">\n        <button\n          className=\"btn btn-outline-secondary\"\n          onClick={() => props.onSearch(value)}\n        >\n          Поиск\n        </button>\n      </div>\n      <input\n        type=\"text\"\n        value={value}\n        onChange={changeInputValue}\n        className=\"form-control\"\n      />\n    </div>\n  );\n};\n\nexport default SearchPerson;\n","import React from 'react';\nimport ReactPaginate from 'react-paginate';\nimport Table from '../Table/Table';\nimport Loader from '../Loader/Loader';\nimport ViewHumanData from '../ViewHumanData/ViewHumanData';\nimport ModeSelector from '../ModeSelector/ModeSelector';\nimport SearchPerson from '../SearchPerson/SearchPerson';\n// для сортировки используется библиотека lodash\nimport _ from 'lodash';\n\nfunction App() {\n  const [isModeSelected, setIsModeSelected] = React.useState(false);\n  const [isLoading, setIslodaing] = React.useState(false);\n  const [data, setData] = React.useState([]);\n  const [search, setSearch] = React.useState('');\n  const [sort, setSort] = React.useState('asc');\n  const [sortField, setSortField] = React.useState('id');\n  const [currentPage, setCurrentPage] = React.useState(0);\n  const [row, setRow] = React.useState(null);\n\n  async function getFetchData(url) {\n      // получаем данные с помощью fetch запроса\n      const res = await fetch(url)\n      // преобразовываем в json формат\n      const data = await res.json()\n      // убираем Loader после загрузки данных\n      setIslodaing(false)\n      // показываем пользователю уже отсортированные данные\n      setData(_.orderBy(data, sortField, sort))\n    }\n\n  const handleClickSort = (sortField) => {\n    const clonedData = data.concat();\n    const sortType = sort === 'asc' ? 'desc' : 'asc'\n    const orderData = _.orderBy(clonedData, sortField, sortType)\n\n    setData(orderData);\n    setSort(sortType);\n    setSortField(sortField);\n  }\n\n  const onRowSelect = (row) => {\n    setRow(row)\n  }\n\n  // функция заглушка для обновления текста в textarea\n  const handleChange = (event) => {\n    console.log(event);\n  }\n\n  // функция поиска отдельного человека\n  const onSearch = (search) => {\n    setSearch(search)\n    setCurrentPage(0)\n  }\n\n  const modeSelectHandler = (url) => {\n    setIsModeSelected(true)\n    setIslodaing(true)\n    // сбросил data чтобы при отправке запроса пагинацию не было видно\n    setData([])\n    setRow(null)\n    getFetchData(url)\n    setCurrentPage(0)\n  }\n\n  // выбираем режим получения данных (32/1000)\n  const pageChangeHandler = ({selected}) => {\n    setCurrentPage(selected)\n  }\n\n  // // Фильтрация данных\n  const getFilteredData = () => {\n    if (!search) {\n      return data\n    }\n    return data.filter(item => {\n      return item['firstName']\n        .toLowerCase()\n        .includes(search.toLowerCase())\n        ||\n        item['lastName']\n        .toLowerCase()\n        .includes(search.toLowerCase())\n    })\n  }\n\n// Фильтрация данных\n  const filteredData = getFilteredData()\n// указываем что из массива data показываем только 50 результатов на странице\n  const displayData = _.chunk(filteredData, 50)[currentPage]\n\n  // считаем сколько данных в выдаче и в зависимости от этого выводим длину пагинации\n  const pageCount = Math.ceil(filteredData.length / 50)\n\n  return (\n    <div className=\"container\">\n      {\n        isLoading\n        ? null\n        : <ModeSelector  onSelect={modeSelectHandler}/>\n      }\n\n      {\n        isLoading\n          ? <Loader />\n          : data.length > 0\n          ? <>\n              <SearchPerson onSearch={onSearch} />\n              <Table\n                data={displayData}\n                handleClickSort={handleClickSort}\n                sort={sort}\n                sortField={sortField}\n                onRowSelect={onRowSelect}\n              />\n            </>\n          :\n            null\n        }\n\n        {\n          data.length > 50\n            ? <ReactPaginate\n                previousLabel={'<'}\n                nextLabel={'>'}\n                breakLabel={'...'}\n                breakClassName={'break-me'}\n                pageCount={pageCount}\n                marginPagesDisplayed={2}\n                pageRangeDisplayed={5}\n                onPageChange={pageChangeHandler}\n                containerClassName={'pagination'}\n                activeClassName={'active'}\n                pageClassName={'page-item'}\n                pageLinkClassName={'page-link'}\n                previousClassName={'page-item'}\n                nextClassName={'page-item'}\n                previousLinkClassName={'page-link'}\n                nextLinkClassName={'page-link'}\n                forcePage={currentPage}\n              />\n            :\n              null\n        }\n\n        {\n          row && <ViewHumanData\n            detailsPersonData={row}\n            handleChange={handleChange}\n          />\n        }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}